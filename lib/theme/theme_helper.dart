import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.primaryContainer,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(24.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primary,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(24.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 48,
        space: 48,
        color: appTheme.blueGray10001,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray700,
          fontSize: 16.fSize,
          fontFamily: 'Gothic A1',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray700,
          fontSize: 14.fSize,
          fontFamily: 'Gothic A1',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray600,
          fontSize: 10.fSize,
          fontFamily: 'Hanken Grotesk',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: colorScheme.primaryContainer,
          fontSize: 48.fSize,
          fontFamily: 'Righteous',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: 24.fSize,
          fontFamily: 'Gothic A1',
          fontWeight: FontWeight.w500,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray60001,
          fontSize: 12.fSize,
          fontFamily: 'Gothic A1',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: appTheme.blueGray900,
          fontSize: 10.fSize,
          fontFamily: 'Gothic A1',
          fontWeight: FontWeight.w500,
        ),
        labelSmall: TextStyle(
          color: colorScheme.onError,
          fontSize: 8.fSize,
          fontFamily: 'Gothic A1',
          fontWeight: FontWeight.w500,
        ),
        titleMedium: TextStyle(
          color: appTheme.blueGray900,
          fontSize: 16.fSize,
          fontFamily: 'Gothic A1',
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          color: appTheme.blueGray900,
          fontSize: 14.fSize,
          fontFamily: 'Gothic A1',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF7335EE),
    primaryContainer: Color(0XFFFFFFFF),
    secondaryContainer: Color(0XFF334E68),

    // Error colors
    errorContainer: Color(0XFF102A43),
    onError: Color(0XFF474747),
    onErrorContainer: Color(0XFFE3D6FB),

    // On colors(text colors)
    onPrimary: Color(0XFF00003B),
    onPrimaryContainer: Color(0XFFD0051B),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber300 => Color(0XFFFFCD5D);

  // Black
  Color get black900 => Color(0XFF000000);

  // BlueGray
  Color get blueGray100 => Color(0XFFCCCCCC);
  Color get blueGray10001 => Color(0XFFD6D6D6);
  Color get blueGray700A5 => Color(0XA5545458);
  Color get blueGray800 => Color(0XFF243B53);
  Color get blueGray900 => Color(0XFF333333);
  Color get blueGray90001 => Color(0XFF31373D);

  // BlueGrayf
  Color get blueGray9004f => Color(0X4F091E42);

  // DeepPurple
  Color get deepPurple100 => Color(0XFFD5C2F9);
  Color get deepPurple10001 => Color(0XFFC7AEF8);
  Color get deepPurple50 => Color(0XFFF1EAFD);
  Color get deepPurpleA200 => Color(0XFF8F5DF1);
  Color get deepPurpleA700 => Color(0XFF591BD4);

  // Gray
  Color get gray100 => Color(0XFFEFFFF5);
  Color get gray200 => Color(0XFFEAEAEA);
  Color get gray300 => Color(0XFFE2E1E1);
  Color get gray400 => Color(0XFFC4C4C4);
  Color get gray40001 => Color(0XFFC1C1C1);
  Color get gray50 => Color(0XFFF8F8F8);
  Color get gray500 => Color(0XFF999999);
  Color get gray5001 => Color(0XFFF9F7FE);
  Color get gray5002 => Color(0XFFFCFCFC);
  Color get gray600 => Color(0XFF848484);
  Color get gray60001 => Color(0XFF707070);
  Color get gray700 => Color(0XFF5B5B5B);
  Color get gray800 => Color(0XFF4B4747);
  Color get gray900 => Color(0XFF191919);
  Color get gray90001 => Color(0XFF2A2A2A);

  // Green
  Color get greenA700 => Color(0XFF00A340);

  // Lime
  Color get lime900 => Color(0XFFB26B00);

  // Orange
  Color get orange700 => Color(0XFFCC8500);

  // Pink
  Color get pink200 => Color(0XFFFCA5AF);

  // Purple
  Color get purple50 => Color(0XFFF6EBFE);

  // Red
  Color get red100 => Color(0XFFFDD7DB);

  // Teal
  Color get teal50 => Color(0XFFD6FFE6);
  Color get teal600 => Color(0XFF199473);

  // Yellow
  Color get yellow100 => Color(0XFFFFF0D0);
  Color get yellow800 => Color(0XFFFAAD1E);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
